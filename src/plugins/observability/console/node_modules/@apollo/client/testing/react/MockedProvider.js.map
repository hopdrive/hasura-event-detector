{"version":3,"file":"MockedProvider.js","sourceRoot":"","sources":["../../../src/testing/react/MockedProvider.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AACnD,OAAO,EAAE,aAAa,IAAI,KAAK,EAAE,MAAM,sBAAsB,CAAC;AAC9D,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAC;AAE9D,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAK5C,OAAO,EACL,iBAAiB,EACjB,gBAAgB,GACjB,MAAM,sCAAsC,CAAC;AAkD9C;IAAoC,kCAGnC;IACC,wBAAY,KAA0B;QACpC,YAAA,MAAK,YAAC,KAAK,CAAC,SAAC;QAEP,IAAA,KAUF,KAAI,CAAC,KAAK,EATZ,KAAK,WAAA,EACL,mBAAkB,EAAlB,WAAW,mBAAG,IAAI,KAAA,EAClB,cAAc,oBAAA,EACd,KAAK,WAAA,EACL,SAAS,eAAA,EACT,IAAI,UAAA,EACJ,YAAY,kBAAA,EACZ,QAAQ,cAAA,EACR,yBAAyB,EAAzB,iBAAiB,mBAAG,KAAK,KACb,CAAC;QACf,IAAI,OAAO,EAAE,CAAC;YACZ,iBAAiB,CACf,KAAI,CAAC,KAAK,EACV,mBAAmB,EACnB,gBAAgB,EAChB,wCAAwC,CACzC,CAAC;YACF,iBAAiB,CACf,KAAI,CAAC,KAAK,EACV,aAAa,EACb,gBAAgB,EAChB,mMAAmM,CACpM,CAAC;QACJ,CAAC;QAED,IAAM,MAAM,GAAG,gBAAgB,CAC7B,CAAC,mBAAmB,EAAE,aAAa,CAAC,EACpC;YACE,OAAA,IAAI,YAAY,CAAC;gBACf,KAAK,EAAE,KAAK,IAAI,IAAI,KAAK,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;gBAC1C,cAAc,gBAAA;gBACd,QAAQ,EAAE,QAAQ,aAAR,QAAQ,cAAR,QAAQ,GAAI;oBACpB,OAAO,EAAE,iBAAiB;iBAC3B;gBACD,IAAI,EACF,IAAI,IAAI,IAAI,QAAQ,CAAC,KAAK,IAAI,EAAE,EAAE,WAAW,EAAE,EAAE,YAAY,cAAA,EAAE,CAAC;gBAClE,SAAS,WAAA;aACV,CAAC;QATF,CASE,CACL,CAAC;QAEF,KAAI,CAAC,KAAK,GAAG;YACX,MAAM,QAAA;SACP,CAAC;;IACJ,CAAC;IAEM,+BAAM,GAAb;QACQ,IAAA,KAA2B,IAAI,CAAC,KAAK,EAAnC,QAAQ,cAAA,EAAE,UAAU,gBAAe,CAAC;QACpC,IAAA,MAAM,GAAK,IAAI,CAAC,KAAK,OAAf,CAAgB;QAE9B,OAAO,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnC,oBAAC,cAAc,IAAC,MAAM,EAAE,MAAM,IAC3B,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAO,UAAU,EAAG,CACtD;YACnB,CAAC,CAAC,IAAI,CAAC;IACX,CAAC;IAEM,6CAAoB,GAA3B;QACE,oEAAoE;QACpE,mDAAmD;QACnD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC;IACH,qBAAC;AAAD,CAAC,AArED,CAAoC,KAAK,CAAC,SAAS,GAqElD","sourcesContent":["import * as React from \"react\";\n\nimport type { DefaultOptions } from \"../../core/index.js\";\nimport { ApolloClient } from \"../../core/index.js\";\nimport { InMemoryCache as Cache } from \"../../cache/index.js\";\nimport { ApolloProvider } from \"../../react/context/index.js\";\nimport type { MockedResponse } from \"../core/index.js\";\nimport { MockLink } from \"../core/index.js\";\nimport type { ApolloLink } from \"../../link/core/index.js\";\nimport type { Resolvers } from \"../../core/index.js\";\nimport type { ApolloCache } from \"../../cache/index.js\";\nimport type { DevtoolsOptions } from \"../../core/ApolloClient.js\";\nimport {\n  warnRemovedOption,\n  muteDeprecations,\n} from \"../../utilities/deprecation/index.js\";\n\nexport interface MockedProviderProps<TSerializedCache = {}> {\n  mocks?: ReadonlyArray<MockedResponse<any, any>>;\n  /**\n   * @deprecated `addTypename` will be removed in Apollo Client 4.0.\n   *\n   * **Recommended now**\n   *\n   * Please set `addTypename` to `true` or remove the prop entirely to use the\n   * default. It is recommended to add `__typename` to your mock objects if it is\n   * not already defined. This ensures the cache more closely resembles the\n   * production environment.\n   */\n  addTypename?: boolean;\n  defaultOptions?: DefaultOptions;\n  cache?: ApolloCache<TSerializedCache>;\n  resolvers?: Resolvers;\n  childProps?: object;\n  children?: any;\n  link?: ApolloLink;\n  showWarnings?: boolean;\n  /**\n   * If set to true, the MockedProvider will try to connect to the Apollo DevTools.\n   * Defaults to false.\n   *\n   * @deprecated `connectToDevTools` will be removed in Apollo Client 4.0.\n   *\n   * **Recommended now**\n   *\n   * Use the `devtools.enabled` option instead.\n   *\n   * ```ts\n   * <MockedProvider devtools={{ enabled: true }} />\n   * ```\n   */\n  connectToDevTools?: boolean;\n\n  /**\n   * Configuration used by the [Apollo Client Devtools extension](https://www.apollographql.com/docs/react/development-testing/developer-tooling/#apollo-client-devtools) for this client.\n   *\n   * @since 3.14.0\n   */\n  devtools?: DevtoolsOptions;\n}\n\nexport interface MockedProviderState {\n  client: ApolloClient<any>;\n}\n\nexport class MockedProvider extends React.Component<\n  MockedProviderProps,\n  MockedProviderState\n> {\n  constructor(props: MockedProviderProps) {\n    super(props);\n\n    const {\n      mocks,\n      addTypename = true,\n      defaultOptions,\n      cache,\n      resolvers,\n      link,\n      showWarnings,\n      devtools,\n      connectToDevTools = false,\n    } = this.props;\n    if (__DEV__) {\n      warnRemovedOption(\n        this.props,\n        \"connectToDevTools\",\n        \"MockedProvider\",\n        \"Please use `devtools.enabled` instead.\"\n      );\n      warnRemovedOption(\n        this.props,\n        \"addTypename\",\n        \"MockedProvider\",\n        \"Please remove the `addTypename` prop. For best results, ensure the provided `mocks` include a `__typename` property on all mock objects to ensure the cache more closely behaves like production.\"\n      );\n    }\n\n    const client = muteDeprecations(\n      [\"connectToDevTools\", \"addTypename\"],\n      () =>\n        new ApolloClient({\n          cache: cache || new Cache({ addTypename }),\n          defaultOptions,\n          devtools: devtools ?? {\n            enabled: connectToDevTools,\n          },\n          link:\n            link || new MockLink(mocks || [], addTypename, { showWarnings }),\n          resolvers,\n        })\n    );\n\n    this.state = {\n      client,\n    };\n  }\n\n  public render() {\n    const { children, childProps } = this.props;\n    const { client } = this.state;\n\n    return React.isValidElement(children) ?\n        <ApolloProvider client={client}>\n          {React.cloneElement(React.Children.only(children), { ...childProps })}\n        </ApolloProvider>\n      : null;\n  }\n\n  public componentWillUnmount() {\n    // Since this.state.client was created in the constructor, it's this\n    // MockedProvider's responsibility to terminate it.\n    this.state.client.stop();\n  }\n}\n"]}