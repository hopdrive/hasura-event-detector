{"version":3,"file":"throwServerError.js","sourceRoot":"","sources":["../../../src/link/utils/throwServerError.ts"],"names":[],"mappings":"AAmBA;;;;;;;;;;;;;;;;GAgBG;AACH,MAAM,CAAC,IAAM,gBAAgB,GAAG,UAC9B,QAAkB,EAClB,MAAW,EACX,OAAe;IAEf,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,OAAO,CAAgB,CAAC;IAChD,KAAK,CAAC,IAAI,GAAG,aAAa,CAAC;IAC3B,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC1B,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC;IACnC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;IACtB,MAAM,KAAK,CAAC;AACd,CAAC,CAAC","sourcesContent":["export type ServerError = Error & {\n  response: Response;\n  /**\n   * @deprecated `result` will be removed in Apollo Client 4.0.\n   *\n   * **Recommended now**\n   *\n   * No action needed\n   *\n   * **When migrating**\n   *\n   * `result` has been replaced by `bodyText` which is the raw string body\n   * returned in the result. Use `JSON.parse` on the `bodyText` property to get\n   * the same value as `result`.\n   */\n  result: Record<string, any> | string;\n  statusCode: number;\n};\n\n/**\n * @deprecated `throwServerError` will be removed in Apollo Client 4.0. This is\n * safe to use in Apollo Client 3.x.\n *\n * **Recommended now**\n *\n * No action needed\n *\n * **When migrating**\n *\n * `ServerError` is a subclass of `Error`. To throw a server error, use\n * `throw new ServerError(...)` instead.\n *\n * ```ts\n * throw new ServerError(\"error message\", { response, result });\n * ```\n */\nexport const throwServerError = (\n  response: Response,\n  result: any,\n  message: string\n) => {\n  const error = new Error(message) as ServerError;\n  error.name = \"ServerError\";\n  error.response = response;\n  error.statusCode = response.status;\n  error.result = result;\n  throw error;\n};\n"]}