"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ItemRange;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _react = _interopRequireWildcard(require("react"));
var _JSONArrow = _interopRequireDefault(require("./JSONArrow"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ItemRange(props) {
  const {
    styling,
    from,
    to,
    renderChildNodes,
    nodeType
  } = props;
  const [expanded, setExpanded] = (0, _react.useState)(false);
  const handleClick = (0, _react.useCallback)(() => {
    setExpanded(!expanded);
  }, [expanded]);
  return expanded ? /*#__PURE__*/_react.default.createElement("div", styling('itemRange', expanded), renderChildNodes(props, from, to)) : /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({}, styling('itemRange', expanded), {
    onClick: handleClick
  }), /*#__PURE__*/_react.default.createElement(_JSONArrow.default, {
    nodeType: nodeType,
    styling: styling,
    expanded: false,
    onClick: handleClick,
    arrowStyle: "double"
  }), `${from} ... ${to}`);
}